types
  enum ErrorLibrary {ServiceError, ItemOmission, ServiceOmission, SequenceOmission, TransientServiceOmission, LateServiceStart, EarlyServiceTermination, BoundedOmissionInterval, ItemCommission, ServiceCommission, SequenceCommission, EarlyServiceStart, LateServiceTermination, ItemTimingError, EarlyDelivery, LateDelivery, SequenceTimingError, HighRate, LowRate, RateJitter, ServiceTimingError, DelayedService, EarlyService, TimingError, RateError, EarlyData, LateData, ServiceTimeShift, ItemValueError, UndetectableValueError, DetectableValueError, OutOfRange, BelowRange, AboveRange, OutOfBounds, SequenceValueError, BoundedValueChange, StuckValue, OutOfOrder, ServiceValueError, OutOfCalibration, ValueError, IncorrectValue, ValueCorruption, BadValue, SequenceError, SubtleValueError, BenignValueError, SubtleValueCorruption, ReplicationError, AsymmetricReplicatesError, AsymmetricValue, AsymmetricApproximateValue, AsymmetricExactValue, AsymmetricTiming, AsymmetricOmission, AsymmetricItemOmission, AsymmetricServiceOmission, SymmetricReplicatesError, SymmetricValue, SymmetricApproximateValue, SymmetricExactValue, SymmetricTiming, SymmetricOmission, SymmetricItemOmission, SymmetricServiceOmission, InconsistentValue, InconsistentTiming, InconsistentOmission, InconsistentItemOmission, InconsistentServiceOmission, AsymmetricTransmissive, ConcurrencyError, RaceCondition, ReadWriteRace, WriteWriteRace, MutExError, Deadlock, Starvation}

  enum PCA_Error {MessageLeak, WithMitMLeak, WithOutMitMLeak, UnlikelyLeak, NetworkDelay, MessageCorruption, UnauthorizedCommission, UnlikelyCorruptionUndetect, MessageDuplicate}

  enum pump_errors {start_commission, start_omission, stop_commission, stop_omission}

  alias ErrorLibrary::TimingError = ErrorLibrary::ItemTimingError

  alias ErrorLibrary::BadValue = ErrorLibrary::ItemValueError

  alias ErrorLibrary::InconsistentValue = ErrorLibrary::AsymmetricValue

  alias ErrorLibrary::RateError = ErrorLibrary::SequenceTimingError

  alias ErrorLibrary::InconsistentItemOmission = ErrorLibrary::AsymmetricItemOmission

  alias ErrorLibrary::ValueError = ErrorLibrary::ItemValueError

  alias ErrorLibrary::LateData = ErrorLibrary::LowRate

  alias ErrorLibrary::AsymmetricTransmissive = ErrorLibrary::AsymmetricValue

  alias ErrorLibrary::SequenceError = ErrorLibrary::SequenceValueError

  alias ErrorLibrary::IncorrectValue = ErrorLibrary::ItemValueError

  alias ErrorLibrary::InconsistentOmission = ErrorLibrary::AsymmetricOmission

  alias ErrorLibrary::ServiceTimeShift = ErrorLibrary::ServiceTimingError

  alias ErrorLibrary::SubtleValueCorruption = ErrorLibrary::DetectableValueError

  alias ErrorLibrary::EarlyData = ErrorLibrary::HighRate

  alias ErrorLibrary::InconsistentServiceOmission = ErrorLibrary::AsymmetricServiceOmission

  alias ErrorLibrary::BenignValueError = ErrorLibrary::DetectableValueError

  alias ErrorLibrary::ValueCorruption = ErrorLibrary::ItemValueError

  alias ErrorLibrary::SubtleValueError = ErrorLibrary::UndetectableValueError

  alias ErrorLibrary::InconsistentTiming = ErrorLibrary::AsymmetricTiming

  alias PCA_Error::NetworkDelay = ErrorLibrary::LateData

system  PCA_PulseOx_scenario_secure_Instance
sub-components {
    authenticate
      with PCA_Error, ErrorLibrary
        ports
          in bindings_IN
          out bindings_OUT
          in connection_IN
          out connection_OUT
        propagations
          connection_IN = {ItemOmission, NetworkDelay, UnauthorizedCommission, MessageCorruption, MessageDuplicate}
          bindings_IN = {ItemOmission, NetworkDelay, UnauthorizedCommission, MessageCorruption, WithMitMLeak, UnlikelyLeak, MessageDuplicate}
          connection_OUT = {ItemOmission, NetworkDelay, UnlikelyLeak, UnauthorizedCommission, MessageCorruption, MessageDuplicate}
          bindings_OUT = {ItemOmission, NetworkDelay}
        flows
          Pass_MessageDuplicate : bindings_IN{MessageDuplicate} -> connection_OUT{MessageDuplicate}
          Authenticate : connection_IN{MessageCorruption, UnauthorizedCommission} -> bindings_OUT{ItemOmission}
          pass_after_check : connection_IN{ItemOmission} -> bindings_OUT{ItemOmission}
          Pass_ItemOmission : bindings_IN{ItemOmission} -> connection_OUT{ItemOmission}
          Pass_NetworkDelay : bindings_IN{NetworkDelay} -> connection_OUT{NetworkDelay}
          pass_after_check_NetworkDelay : connection_IN{NetworkDelay} -> bindings_OUT{NetworkDelay}
          Pass_UnauthorizedCommission : bindings_IN{UnauthorizedCommission} -> connection_OUT{UnauthorizedCommission}
          DetectReplay : connection_IN{MessageDuplicate} -> bindings_OUT{ItemOmission}
          Authenticate_MitM : bindings_IN{WithMitMLeak, UnlikelyLeak} -> connection_OUT{UnlikelyLeak}
          pass_MessageCorruption : bindings_IN{MessageCorruption} -> connection_OUT{MessageCorruption}

    PCA_Pump
      with pump_errors, ErrorLibrary, PCA_Error
        ports
          out IV_infuse
          in control
        propagations
          control = {stop_commission, stop_omission, start_commission, start_omission, ItemOmission, UnauthorizedCommission, NetworkDelay, MessageLeak, MessageDuplicate, MessageCorruption}
          IV_infuse = {EarlyServiceTermination, LateServiceTermination, EarlyServiceStart, LateServiceStart}
        flows
          incorrect_start : control{start_commission} -> IV_infuse{EarlyServiceStart}
          missed_stop : control{stop_omission} -> IV_infuse{LateServiceTermination}
          missing_command : control{ItemOmission, NetworkDelay} -> IV_infuse{LateServiceTermination, LateServiceStart}
          Pump : control -> IV_infuse
          unexpected_stop : control{stop_commission} -> IV_infuse{EarlyServiceTermination, LateServiceTermination}
          missing_start : control{start_omission} -> IV_infuse{LateServiceStart}
          sinking_leaks : control{MessageLeak} -> *
          adversary_actions : control{UnauthorizedCommission, MessageDuplicate, MessageCorruption} -> IV_infuse{EarlyServiceTermination, LateServiceTermination, EarlyServiceStart, LateServiceStart}

    PulseOx
      with ErrorLibrary, pump_errors, PCA_Error
        ports
          in FingerClip_Saturation
          out SpO2
        propagations
          SpO2 = {ItemValueError, ItemOmission, UnauthorizedCommission, NetworkDelay, MessageLeak, MessageDuplicate, MessageCorruption}
        flows
          Read_SpO2 : FingerClip_Saturation -> SpO2
          numerical_failure : * -> SpO2{ItemValueError}
          communicating_out : * -> SpO2{ItemOmission, UnauthorizedCommission, NetworkDelay, MessageLeak, MessageDuplicate, MessageCorruption}

    Patient
      with ErrorLibrary
        ports
          in Vein_infuse
          out BloodSat_Saturation
        propagations
          Vein_infuse = {ServiceError}
        flows
          Absorb : Vein_infuse -> *
          BloodSaturation : * -> BloodSat_Saturation

    App
      with pump_errors, ErrorLibrary, PCA_Error
        ports
          in SpO2
          out command
        propagations
          SpO2 = {ItemValueError, ItemOmission, UnauthorizedCommission, NetworkDelay, MessageLeak, MessageDuplicate, MessageCorruption}
          command = {stop_commission, stop_omission, start_commission, start_omission, ItemOmission, UnauthorizedCommission, NetworkDelay, MessageLeak, MessageDuplicate, MessageCorruption}
        flows
          inappropriate_ticket_provided : SpO2{ItemValueError} -> command{stop_commission, stop_omission, start_commission, start_omission}
          Check_Status : SpO2 -> command
          sinking_corruption : SpO2{UnauthorizedCommission, MessageDuplicate, MessageCorruption} -> *
          communicating : * -> command{ItemOmission, UnauthorizedCommission, NetworkDelay, MessageLeak, MessageDuplicate, MessageCorruption}
          command_leak : * -> command{MessageLeak}
          sinking_leaks : SpO2{MessageLeak} -> *
          mitigation1 : SpO2{ItemOmission, NetworkDelay, AboveRange} -> *
          stop_fault : * -> command{stop_omission, stop_commission}

    encrypt
      with PCA_Error, ErrorLibrary
        ports
          in connection_IN
          out connection_OUT
          in bindings_IN
          out bindings_OUT
        propagations
          connection_IN = {ItemOmission, NetworkDelay}
          bindings_IN = {UnauthorizedCommission, ItemOmission, NetworkDelay, MessageLeak, MessageDuplicate, MessageCorruption}
          connection_OUT = {UnauthorizedCommission, ItemOmission, NetworkDelay, MessageDuplicate, MessageCorruption, WithMitMLeak, UnlikelyLeak}
          bindings_OUT = {ItemOmission, NetworkDelay}
        flows
          Pass_MessageDuplicate : bindings_IN{MessageDuplicate} -> connection_OUT{MessageDuplicate}
          Pass_ItemOmission : bindings_IN{ItemOmission} -> connection_OUT{ItemOmission}
          Pass_NetworkDelay : bindings_IN{NetworkDelay} -> connection_OUT{NetworkDelay}
          Pass_MessageCorruption : bindings_IN{MessageCorruption} -> connection_OUT{MessageCorruption}
          Pass_UnauthorizedCommission : bindings_IN{UnauthorizedCommission} -> connection_OUT{UnauthorizedCommission}
          pass_after_decrypt : connection_IN{ItemOmission, NetworkDelay} -> bindings_OUT{ItemOmission, NetworkDelay}
          ConfidentialityProtection : bindings_IN{MessageLeak} -> connection_OUT{WithMitMLeak, UnlikelyLeak}

    wifi
      with ErrorLibrary, PCA_Error
        ports
          in bindings_IN
          out bindings_OUT
        propagations
          bindings_IN = {ItemOmission, NetworkDelay, UnlikelyLeak, UnauthorizedCommission, MessageCorruption, MessageDuplicate}
          bindings_OUT = {ItemOmission, NetworkDelay, UnauthorizedCommission, MessageCorruption, MessageDuplicate}
        flows
          dolev_nw_pass_MessageCorruption : bindings_IN{MessageCorruption} -> bindings_OUT{MessageCorruption}
          dolev_nw_pass_MessageDuplicate : bindings_IN{MessageDuplicate} -> bindings_OUT{MessageDuplicate}
          accessable : bindings_IN{UnlikelyLeak} -> *
          dolev_nw_pass_ItemOmission : bindings_IN{ItemOmission} -> bindings_OUT{ItemOmission}
          dolev_nw_pass_NetworkDelay : bindings_IN{NetworkDelay} -> bindings_OUT{NetworkDelay}
          dolev_nw_pass_UnauthorizedCommission : bindings_IN{UnauthorizedCommission} -> bindings_OUT{UnauthorizedCommission}
}
connections
    administer : PCA_Pump.IV_infuse -> Patient.Vein_infuse

    spo2 : PulseOx.SpO2 -> App.SpO2

    read : Patient.BloodSat_Saturation -> PulseOx.FingerClip_Saturation

    activate : App.command -> PCA_Pump.control

deployment
    PCA_PulseOx_scenario_secure_Instance::encrypt.bindings_OUT -> PCA_PulseOx_scenario_secure_Instance::spo2

    PCA_PulseOx_scenario_secure_Instance::activate -> PCA_PulseOx_scenario_secure_Instance::encrypt.bindings_IN

    PCA_PulseOx_scenario_secure_Instance::encrypt.connection_OUT -> PCA_PulseOx_scenario_secure_Instance::authenticate.bindings_IN

    PCA_PulseOx_scenario_secure_Instance::authenticate.bindings_OUT -> PCA_PulseOx_scenario_secure_Instance::encrypt.connection_IN

    PCA_PulseOx_scenario_secure_Instance::encrypt.bindings_OUT -> PCA_PulseOx_scenario_secure_Instance::activate

    PCA_PulseOx_scenario_secure_Instance::authenticate.connection_OUT -> PCA_PulseOx_scenario_secure_Instance::wifi.bindings_IN

    PCA_PulseOx_scenario_secure_Instance::spo2 -> PCA_PulseOx_scenario_secure_Instance::encrypt.bindings_IN

    PCA_PulseOx_scenario_secure_Instance::wifi.bindings_OUT -> PCA_PulseOx_scenario_secure_Instance::authenticate.connection_IN