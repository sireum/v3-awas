// from https://github.com/santoslab/aadl-map-apps/tree/develop/pca-shutoff

types

  alias Natural = Integer (0, _)

  enum States


  // from ErrorLibrary ?

  lattice ErrorType

  lattice ItemCommission extends ErrorType

  lattice ServiceError extends ErrorType

  lattice SequenceOmission extends ErrorType

  lattice ItemOmission extends ErrorType

  lattice LateDelivery extends ErrorType

  lattice OutOfRange extends ErrorType

  lattice LateDate extends ErrorType


  // from https://github.com/santoslab/aadl-map-apps/blob/develop/map-globals/packages/MAP_Errors.aadl

  lattice ControlInputWrong extends ItemCommission

  lattice ControlInputMissing extends ItemOmission

  lattice IncorrectlyBuiltControlAlgorithm extends ServiceError

  lattice OutdatedControlAlgorithm extends ServiceError

  lattice IncorrectlyModifiedControlAlgorithm extends ServiceError

  lattice ProcessModelInconsistent extends ServiceError

  lattice ProcessModelIncomplete extends ServiceError

  lattice ProcessModelIncorrect extends ServiceError

  lattice InappropriateControlAction extends SequenceCommission

  lattice IneffectiveControlAction extends ServiceError

  lattice MissingControlAction extends ItemOmission

  lattice InadequateActuatorOperation extends ServiceError

  lattice DelayedOperation extends LateDelivery

  lattice ComponentFailure extends ErrorType

  lattice ChangesOverTime extends ErrorType

  lattice ConflictingControlActionsFromExternalController extends SequenceCommission

  lattice ProcessInputMissing extends ItemOmission

  lattice ProcessInputWrong extends ItemCommission

  lattice UnidentifiedDisturbance extends ItemCommission

  lattice OutOfRangeDisturbance extends OutOfRange

  lattice ProcessOutputContributesToSystemHazard extends ErrorType

  lattice FeedbackDelayedFromProcess extends LateData

  lattice MesasurementInaccurate extends ServiceCommission

  lattice IncorrectInformationProvided extends ItemCommission

  lattice NoInformationProvided extends ItemOmission

  lattice InadequateSensorOperation extends ServiceError

  lattice FeedbackDelayedFromSensor extends LateData

  lattice InadequateFeedback extends ItemCommission

  lattice MissingFeedback extends ItemOmission


  // from https://github.com/santoslab/aadl-map-apps/blob/develop/map-globals/propertysets/MAP_Properties.aadl

  enum ProcessKind { Logic, Display }

  enum ComponentKind { Top, Actuator, Sensor, Controller, ControlledProcess }


  // from https://github.com/santoslab/aadl-map-apps/blob/develop/map-globals/propertysets/MAP_Error_Properties.aadl

  alias Context = String

  alias Assumption = String

  record Abbreviation
    full: String
    definition: String

  record AccidentLevel
    level: Natural
    description: String

  record Accident
    number: Natural
    description: String
    level: AccidentLevel

  record Hazard
    number: Natural
    description: String
    accident: Accident

  record Constraint
    description: String
    hazard: Hazard

  // Q.1: why are all these enum elements grouped into one enum type?
  enum KindsType {
    NotProviding, Providing, Early, Late, AppliedTooLong, StoppedTooSon,

    ValueLow, ValueHigh,

    ParamsMissing, ParamsWrong, ParamsOutOfOrder
  }

  alias RelevantStates = Accident

  record ProtoHazard
    harm: Accident
    componentState: States
    environmentState: States
    interactionPoints: Seq[Port]

  record OccurrenceCause
    errorType: Option[ErrorType]
    description: String

  record Occurrence
    kind: KindsType
    violatedConstraint: Option[Constraint]
    title: String
    cause: OccurrenceCause
    compensation: String


  // https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/PCA_Shutoff_Errors.aadl

  lattice InadvertentPumpNormally extends InappropriateControlAction

  lattice SpO2Value extends InadequateSensorOperation // inserted to group sub lattice elements related to SpO2Value

  lattice SpO2ValueHigh extends SpO2Value

  lattice SpO2ValueLow extends SpO2Value

  lattice ETCO2Value extends InadequateSensorOperation // inserted to group sub lattice elements related to ETCO2Value

  lattice ETCO2ValueLow extends ETCO2Value

  lattice ETCO2ValueHigh extends ETCO2Value

  lattice RespiratoryRate extends InadequateSensorOperation // inserted to group sub lattice elements related to RespiratoryRate

  lattice RespiratoryRateLow extends RespiratoryRate

  lattice RespiratoryRateHigh extends RespiratoryRate

  lattice DeviceAlarmFailsStatus extends InadequateSensorOperation // inserted to group sub lattice elements related to DeviceAlarm

  lattice DeviceAlarmFailsOn extends DeviceAlarmFailsStatus

  lattice DeviceAlarmFailsOff extends DeviceAlarmFailsStatus

  enum PatientStatus extends States { Healthy, Risk, Overdose }

  enum PumpAction extends States { PumpNormal, PumpMinimal }


constants

  // from https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/propertysets/PCA_Shutoff_Error_Properties.aadl

  Context: Context = "Example context"

  NoAlarms: Assumption = "There are no alarms that need forwarding"

  SpO2: Abbreviation = Abbreviation(full = "Blood-oxygen Saturation",
                                    definition = "The oxygenation of the patient's blood")

  Death: AccidentLevel = AccidentLevel(level = 1,
                                       description = "Results in the death of a human")

  PatientDeath: Accident = Accident(description = "Patient is killed ",
                                    level = Death)

  InadvertentPumpNormally: Hazard = Hazard(description = "The pump is ordered to run normally when it should not.",
                                           accident = PatientDeath)

  BadInfoGiven: Hazard = Hazard(description = "Incorrect information is sent to the display.",
                                accident = PatientDeath)

  DontLetPumpRunWhenUnsafe: Constraint = Constraint(description = "The app must command the pump to stop if the patient’s vital signs indicate over-infusion.",
                                                    hazard = InadvertentPumpNormally)

  DisplayMustShowPatientStatus: Constraint = Constraint(description = "The app must correctly inform the display of the status of the patient’s vital signs.",
                                                        hazard = PCA_Shutoff_Error_Properties::BadInfoGiven)

  DisplayMustShowPumpStatus: Constraint = Constraint(description = "The app must correctly inform the display of the pump command status.",
                                                     hazard = BadInfoGiven)


components

  // from https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/Capnograph_Interface.aadl

  Capnograph
    ports
      out ETCO2: ETCO2ValueHigh
      out RespiratoryRate: RespiratoryRate
      out DeviceError: DeviceAlarmFailsStatus
    flows
      ETCO2UnDetectableHighValueFlowSource: * -> ETCO2{ETCO2ValueHigh}
      RRUnDetectableHighValueFlowSource: * -> RespiratoryRate{RespiratoryRateHigh}
      RRUnDetectableLowValueFlowSource: * -> RespiratoryRate{RespiratoryRateLow}
      DeviceAlarmNotSent: * -> DeviceError{DeviceAlarmFailsOff}
      DeviceAlarmErroneouslySent: * -> DeviceError{DeviceAlarmFailsOn}
    properties
      relevantStates: RelevantStates = PatientDeath // Q.2: what does "applies to PatientStatus" mean here?

  // from https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/PCAPump_Interface.aadl

  PcaPump
    ports
      in PumpNormally: InadvertentPumpNormally
    flows
      ODCommand: PumpNormally{InadvertentPumpNormally} -> *
    properties
      componentKing: ComponentKind = ComponentKind.Actuator
      relevantStates: RelevantStates = PatientDeath

  // from https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/PCA_Shutoff_Display.aadl

  AppDisplay
    ports
      in SpO2: SpO2ValueHigh
      in ETCO2 // Q.3: is this not used for hazard analysis? (likewise for the rest of untyped ports)
      in RespiratoryRate
      in CommandPumpNormal
      in CapnographError
      in PulseOxError
      out Show
    flows
      HighSpO2MisleadsClinician: SpO2{SpO2ValueHigh} -> *
    properties
      processKind: ProcessKind = ProcessKind.Display
      componentKind: ComponentKind = ComponentKind.Actuator
      relevantStates: RelevantStates = PatientDeath

  // https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/PCA_Shutoff_Logic.aadl

  AppLogic
    ports
      in SpO2: SpO2ValueHigh
      in ETCO2: ETCO2ValueHigh
      in RespiratoryRate: RespiratoryRate
      in CapnographError
      in PulseOxError
      out CommandPumpNormal: InadvertentPumpNormally
    flows
      HighSpO2LeadsToOD: SpO2{SpO2ValueHigh} -> CommandPumpNormal{InadvertentPumpNormally}
      HighETCO2LeadsToOD: ETCO2{ETCO2ValueHigh} -> CommandPumpNormal{InadvertentPumpNormally}
      LowRRLeadsToOD: RespiratoryRate{RespiratoryRateLow, RespiratoryRateHigh} -> CommandPumpNormal{InadvertentPumpNormally}
    properties
      relevantStates: RelevantStates = PatientDeath
      protoHazard: ProtoHazard = ProtoHazard(harm = PatientDeath,
                                             componentState = PumpAction.PumpNormal,
                                             environmentState = PatientStatus.Risk,
                                             interactionPoints = Seq[Port](AppLogic.SpO2, AppLogic.ETCO2))
      occurrence: Occurrence = Occurrence(kind = KindsType.Providing,
                                          violatedConstraint = Some[Constraint](DontLetPumpRunWhenUnsafe),
                                          title = "High Physio Params",
                                          cause = OccurrenceCause(errorType = Some[ErrorType](InadvertentPumpNormally),
                                                                  description = "One or more physiological parameters are too high, leading the app logic to incorrectly believe the patient is healthy"),
                                          compensation = "Physiological values are cross-checked with others")

  // from https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/PulseOx_Interface.aadl

  PulseOx
    ports
      out SpO2: SpO2ValueHigh
      out DeviceError: DeviceAlarmFailsStatus
    flows
      SpO2UnDetectableHighValueFlowSource: * -> SpO2{SpO2ValueHigh}
      DeviceAlarmNotSent: * -> DeviceError{DeviceAlarmFailsOn}
      DeviceAlarmErroneouslySent: * -> DeviceError{DeviceAlarmFailsOff}
    properties
      relevantStates: RelevantStates = PatientDeath


connections

  // from https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/PCA_Shutoff_System.aadl

  Spo2Logic: PulseOx.SpO2{InadvertentPumpNormally} -> AppLogic.SpO2
  // Q.4: Sam, what does https://github.com/santoslab/aadl-map-apps/blob/develop/pca-shutoff/packages/PCA_Shutoff_System.aadl#L49-L51 mean?
  //      Specifically, what does error source on a connection mean?
  //      Which port of the connection originates the error?
  //      In the above, I put it in PulseOx.SpO2.

  RespiratoryRateLogic: Capnograph.RespiratoryRate -> AppLogic.RespiratoryRate

  PumpCommandLogic: AppLogic.CommandPumpNormal -> PcaPump.PumpNormally
    properties
      occurrence1: Occurrence = Occurrence(kind = KindsType.Providing,
                                           violatedConstraint = Some[Constraint](DontLetPumpRunWhenUnsafe),
                                           title = "High Physio Params",
                                           cause = OccurrenceCause(errorType = Some[ErrorType](InadvertentPumpNormally),
                                                                   description = "One or more physiological parameters are too high, leading the app logic to incorrectly believe the patient is healthy"),
                                           compensation = "Physiological values are cross-checked with others")
      occurrence2: Occurrence = Occurrence(kind = KindsType.NotProviding,
                                           violatedConstraint = None[Constraint],
                                           title = "NotHazardous",
                                           cause = OccurrenceCause(errorType = None[ErrorType],
                                                                   description = "Not running the pump isn't unsafe (though it may be undesirable)"),
                                           compensation = "Not needed")

  ETCO2Logic: Capnograph.ETCO2 -> AppLogic.ETCO2

  CapnographFailLogic: Capnograph.DeviceError -> AppLogic.CapnographError

  PulseoxFailLogic: PulseOx.DeviceError -> AppLogic.PulseOxError

  Spo2Display: PulseOx.SpO2 -> AppDisplay.SpO2

  RespiratoryRateDisplay: Capnograph.RespiratoryRate -> AppDisplay.RespiratoryRate

  PumpCommandDisplay: AppLogic.CommandPumpNormal -> AppDisplay.CommandPumpNormal

  ETCO2Display: Capnograph.ETCO2 -> AppDisplay.ETCO2

  CapnographFailDisplay: Capnograph.DeviceError -> AppDisplay.CapnographError

  PulseOxFailDisplay: PulseOx.DeviceError -> AppDisplay.PulseOxError
