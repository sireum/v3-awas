types
  enum PCA_Error {SecurityError, MessageLeak, MessageLeakMitM, UnlikelyLeak, AuthenticityError, MessageCommission, MessageOmission, MessageReplay, UnlikelyCommission, MessageCorruption, UnlikelyCorruption, start_commission, start_omission, stop_commission, stop_omission, SpO2_ValueError, SpO2_Omission, EarlyServiceTermination, LateServiceTermination, EarlyServiceStart, LateServiceStart}

  enum ErrorLibrary {ServiceError, ItemOmission, ServiceOmission, SequenceOmission, TransientServiceOmission, LateServiceStart, EarlyServiceTermination, BoundedOmissionInterval, ItemCommission, ServiceCommission, SequenceCommission, EarlyServiceStart, LateServiceTermination, ItemTimingError, EarlyDelivery, LateDelivery, SequenceTimingError, HighRate, LowRate, RateJitter, ServiceTimingError, DelayedService, EarlyService, TimingError, RateError, EarlyData, LateData, ServiceTimeShift, ItemValueError, UndetectableValueError, DetectableValueError, OutOfRange, BelowRange, AboveRange, OutOfBounds, SequenceValueError, BoundedValueChange, StuckValue, OutOfOrder, ServiceValueError, OutOfCalibration, ValueError, IncorrectValue, ValueCorruption, BadValue, SequenceError, SubtleValueError, BenignValueError, SubtleValueCorruption, ReplicationError, AsymmetricReplicatesError, AsymmetricValue, AsymmetricApproximateValue, AsymmetricExactValue, AsymmetricTiming, AsymmetricOmission, AsymmetricItemOmission, AsymmetricServiceOmission, SymmetricReplicatesError, SymmetricValue, SymmetricApproximateValue, SymmetricExactValue, SymmetricTiming, SymmetricOmission, SymmetricItemOmission, SymmetricServiceOmission, InconsistentValue, InconsistentTiming, InconsistentOmission, InconsistentItemOmission, InconsistentServiceOmission, AsymmetricTransmissive, ConcurrencyError, RaceCondition, ReadWriteRace, WriteWriteRace, MutExError, Deadlock, Starvation}

  enum pump_errors {start_commission, start_omission, stop_commission, stop_omission}

  alias ErrorLibrary::TimingError = ErrorLibrary::ItemTimingError

  alias ErrorLibrary::BadValue = ErrorLibrary::ItemValueError

  alias ErrorLibrary::InconsistentValue = ErrorLibrary::AsymmetricValue

  alias ErrorLibrary::RateError = ErrorLibrary::SequenceTimingError

  alias ErrorLibrary::InconsistentItemOmission = ErrorLibrary::AsymmetricItemOmission

  alias ErrorLibrary::ValueError = ErrorLibrary::ItemValueError

  alias ErrorLibrary::LateData = ErrorLibrary::LowRate

  alias ErrorLibrary::AsymmetricTransmissive = ErrorLibrary::AsymmetricValue

  alias ErrorLibrary::SequenceError = ErrorLibrary::SequenceValueError

  alias ErrorLibrary::IncorrectValue = ErrorLibrary::ItemValueError

  alias ErrorLibrary::InconsistentOmission = ErrorLibrary::AsymmetricOmission

  alias ErrorLibrary::ServiceTimeShift = ErrorLibrary::ServiceTimingError

  alias ErrorLibrary::SubtleValueCorruption = ErrorLibrary::DetectableValueError

  alias ErrorLibrary::EarlyData = ErrorLibrary::HighRate

  alias ErrorLibrary::InconsistentServiceOmission = ErrorLibrary::AsymmetricServiceOmission

  alias ErrorLibrary::BenignValueError = ErrorLibrary::DetectableValueError

  alias ErrorLibrary::ValueCorruption = ErrorLibrary::ItemValueError

  alias ErrorLibrary::SubtleValueError = ErrorLibrary::UndetectableValueError

  alias ErrorLibrary::InconsistentTiming = ErrorLibrary::AsymmetricTiming

system  PCA_PulseOx_scenario1_Instance

    sub-components {
      App
        with PCA_Error
          ports
            in SpO2
            out command
          propagations
            SpO2 = {SpO2_ValueError, SecurityError, SpO2_Omission}
            command = {stop_commission, stop_omission, start_commission, start_omission, SecurityError}
          flows
            Check_Status : SpO2 -> command
            stop_fault : * -> command{stop_omission, stop_commission}
            inappropriate_ticket_provided : SpO2{SpO2_ValueError, SecurityError} -> command{stop_commission, stop_omission, start_commission, start_omission}
            no_spo2 : SpO2{SpO2_Omission} -> command{stop_omission, start_omission}

      PCA_Pump
        with PCA_Error
          ports
            out IV_infuse
            in control
          propagations
            control = {stop_commission, stop_omission, start_commission, start_omission, SecurityError}
            IV_infuse = {EarlyServiceTermination, LateServiceTermination, EarlyServiceStart, LateServiceStart}
          flows
            missed_stop : control{stop_omission} -> IV_infuse{LateServiceTermination}
            unexpected_stop : control{stop_commission} -> IV_infuse{EarlyServiceTermination, LateServiceTermination}
            missing_start : control{start_omission} -> IV_infuse{LateServiceStart}
            incorrect_start : control{start_commission} -> IV_infuse{EarlyServiceStart}

      Patient
        with PCA_Error
          ports
            in Vein_infuse
            out BloodSat_Saturation
          propagations
            Vein_infuse = {EarlyServiceTermination, LateServiceTermination, EarlyServiceStart, LateServiceStart}
          flows
            accident : Vein_infuse{EarlyServiceTermination, LateServiceTermination, EarlyServiceStart, LateServiceStart} -> *

      PulseOx
        with ErrorLibrary, pump_errors, PCA_Error
          ports
            in FingerClip_Saturation
            out SpO2
          propagations
            SpO2 = {SpO2_ValueError, SpO2_Omission, SecurityError}
          flows
            numerical_failure : * -> SpO2{SpO2_ValueError}
            disloged_sensor : * -> SpO2{SpO2_Omission}
            communicating_out : * -> SpO2{SecurityError}

      wifi_command
        with ErrorLibrary, PCA_Error
          ports
            in in_interface
            out out_interface
          propagations
            in_interface = {SecurityError, stop_commission, stop_omission, start_commission, start_omission}
            out_interface = {SecurityError, stop_commission, stop_omission, start_commission, start_omission}
          flows
            transmission_wifi : in_interface -> out_interface
            spoof_message : * -> out_interface{SecurityError}
            accessable : in_interface{SecurityError} -> *
            transmission_cmd : in_interface{stop_commission, stop_omission, start_commission, start_omission} -> out_interface{stop_commission, stop_omission, start_commission, start_omission}

      wifi_spo2
        with ErrorLibrary, PCA_Error
          ports
            in in_interface
            out out_interface
          propagations
            in_interface = {SpO2_ValueError, SecurityError, SpO2_Omission}
            out_interface = {SpO2_ValueError, SecurityError, SpO2_Omission}
          flows
            transmission_wifi : in_interface -> out_interface
            spoof_message : * -> out_interface{SecurityError}
            accessable : in_interface{SecurityError} -> *
            transmission : in_interface{SpO2_ValueError, SpO2_Omission} -> out_interface{SpO2_ValueError, SpO2_Omission}
    }
    connections
      administer : PCA_Pump.IV_infuse -> Patient.Vein_infuse

      spo2 : PulseOx.SpO2 -> wifi_spo2.in_interface

      spo2_app : wifi_spo2.out_interface -> App.SpO2

      activate_pump : wifi_command.out_interface -> PCA_Pump.control

      read : Patient.BloodSat_Saturation -> PulseOx.FingerClip_Saturation

      activate_app : App.command -> wifi_command.in_interface