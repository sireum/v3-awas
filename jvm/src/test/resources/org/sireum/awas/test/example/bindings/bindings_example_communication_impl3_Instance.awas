//hand translated
types
      enum ErrorLibrary {AboveRange, AsymmetricApproximateValue, AsymmetricExactValue, AsymmetricItemOmission, AsymmetricOmission, AsymmetricReplicatesError, AsymmetricServiceOmission, AsymmetricTiming, AsymmetricTransmissive, AsymmetricValue, BadValue, BelowRange, BenignValueError, BoundedOmissionInterval, BoundedValueChange, ConcurrencyError, Deadlock, DelayedService, DetectableValueError, EarlyData, EarlyDelivery, EarlyService, EarlyServiceStart, EarlyServiceTermination, HighRate, InconsistentItemOmission, InconsistentOmission, InconsistentServiceOmission, InconsistentTiming, InconsistentValue, IncorrectValue, ItemCommission, ItemOmission, ItemTimingError, ItemValueError, LateData, LateDelivery, LateServiceStart, LateServiceTermination, LowRate, MutExError, OutOfBounds, OutOfCalibration, OutOfOrder, OutOfRange, RaceCondition, RateError, RateJitter, ReadWriteRace, ReplicationError, SequenceCommission, SequenceError, SequenceOmission, SequenceTimingError, SequenceValueError, ServiceCommission, ServiceError, ServiceOmission, ServiceTimeShift, ServiceTimingError, ServiceValueError, Starvation, StuckValue, SubtleValueCorruption, SubtleValueError, SymmetricApproximateValue, SymmetricExactValue, SymmetricItemOmission, SymmetricOmission, SymmetricReplicatesError, SymmetricServiceOmission, SymmetricTiming, SymmetricValue, TimingError, TransientServiceOmission, UndetectableValueError, ValueCorruption, ValueError, WriteWriteRace, start_commission, start_omission, stop_commission, stop_omission}

system Communication_impl3_Instance

	sub-components {
      hw1
        with ErrorLibrary
        ports
          in nwInterface__BUS_IN
          out nwInterface__BUS_OUT
          in bindings_IN
          out bindings_OUT
        propagations
		  nwInterface__BUS_OUT = {ItemOmission}
		  bindings_OUT = {LateData}
		flows
		  overloaded : * -> bindings_OUT{LateData}
		  cpuCrashed : * -> nwInterface__BUS_OUT{ItemOmission}

      hw2
        with ErrorLibrary
		ports
          in nwInterface__BUS_IN
          out nwInterface__BUS_OUT
          in bindings_IN
          out bindings_OUT
        propagations
          nwInterface__BUS_IN = {ItemOmission}

		  bindings_OUT = {LateData}
		flows
		  overloaded : * -> bindings_OUT{LateData}
		  does_nothing : nwInterface__BUS_IN{ItemOmission} -> *

      network
        with ErrorLibrary
        ports
          in bindings_IN
          out bindings_OUT
          in access_IN
          out access_OUT
        propagations
          bindings_IN = {LateData, EarlyData}
          bindings_OUT = {LateData, ItemOmission}
		  access_IN = {ItemOmission}
		  access_OUT = {ItemOmission}
		flows
		  qos_fail : access_IN{ItemOmission} -> access_OUT{ItemOmission}
		  qos_Npub : bindings_IN{EarlyData} -> bindings_OUT{ItemOmission}

      receiver
        with ErrorLibrary
        ports
          in sub
          in processor_IN
          out processor_OUT
        propagations
          sub = {LateData, EarlyData, ItemOmission}

        flows
          consume : sub{LateData, EarlyData, ItemOmission} -> *

      sender
        with ErrorLibrary
        ports
          out pub
          in processor_IN
          out processor_OUT
		propagations
		  pub = {LateData, EarlyData}
		  processor_IN = {LateData}

		flows
		  qos_Npub : * -> pub{EarlyData}
		  data_gen_delay:  processor_IN{LateData} -> pub{LateData}
	}

connections
      publish : sender.pub -> receiver.sub

deployment
      Communication_impl3_Instance::network.bindings_OUT -> Communication_impl3_Instance::publish
      Communication_impl3_Instance::publish -> Communication_impl3_Instance::network.bindings_IN

      Communication_impl3_Instance::hw2.bindings_OUT -> Communication_impl3_Instance::receiver.processor_IN
      Communication_impl3_Instance::receiver.processor_OUT -> Communication_impl3_Instance::hw2.bindings_IN

      Communication_impl3_Instance::hw1.bindings_OUT -> Communication_impl3_Instance::sender.processor_IN
      Communication_impl3_Instance::sender.processor_OUT -> Communication_impl3_Instance::hw1.bindings_IN

