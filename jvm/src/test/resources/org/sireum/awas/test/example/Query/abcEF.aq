q1 = reach forward abcEF.A.aIn{Error.High}
q2 = reach backward abcEF.C.cOut{Error.High}
q3 = reach backward abcEF.A.aIn{Error.Low}
q4 = 'q1 intersect 'q3
q5 = reach forward abcEF.A.aIn
q6 = 'q4 union 'q5
//testing path queries
q7 = reach paths from abcEF.A to abcEF.C
q8 = reach paths from abcEF.A.aIn to abcEF.C.cOut
q9 = reach paths from abcEF.A.aIn{Error.High} to abcEF.C.cOut{Error.High} //no path exists between the source and target: expected empty
q10 = reach paths from abcEF.A.aIn{Error.High} to abcEF.B.bOut2{Error.Low}
//testing type coercion
q11 = 'q5 intersect 'q10

//TODO: the following query is not working as expected: fine grained type coercion required
q12 = 'q7 union (reach paths from abcEF.A.aIn{Error.High} to abcEF.B.bOut2{Error.Low})

nq1 = abcEF.A
nq2 = abcEF.A:in-port
nq3 = abcEF.B:out-port:port-error

q13 = abcEF.B2C:in-port


/*
q14 = B2C{Error.Low} -> *
q15 = * -> A2B{Error.Low}
q16 = A{Error.High} -> *
q17 = q1 - q16 //this should be empty

*/