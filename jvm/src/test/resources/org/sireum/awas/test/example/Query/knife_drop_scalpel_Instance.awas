types
  enum ErrorLibrary {ServiceError, ItemOmission, ServiceOmission, SequenceOmission, TransientServiceOmission, LateServiceStart, EarlyServiceTermination, BoundedOmissionInterval, ItemCommission, ServiceCommission, SequenceCommission, EarlyServiceStart, LateServiceTermination, ItemTimingError, EarlyDelivery, LateDelivery, SequenceTimingError, HighRate, LowRate, RateJitter, ServiceTimingError, DelayedService, EarlyService, TimingError, RateError, EarlyData, LateData, ServiceTimeShift, ItemValueError, UndetectableValueError, DetectableValueError, OutOfRange, BelowRange, AboveRange, OutOfBounds, SequenceValueError, BoundedValueChange, StuckValue, OutOfOrder, ServiceValueError, OutOfCalibration, ValueError, IncorrectValue, ValueCorruption, BadValue, SequenceError, SubtleValueError, BenignValueError, SubtleValueCorruption, ReplicationError, AsymmetricReplicatesError, AsymmetricValue, AsymmetricApproximateValue, AsymmetricExactValue, AsymmetricTiming, AsymmetricOmission, AsymmetricItemOmission, AsymmetricServiceOmission, SymmetricReplicatesError, SymmetricValue, SymmetricApproximateValue, SymmetricExactValue, SymmetricTiming, SymmetricOmission, SymmetricItemOmission, SymmetricServiceOmission, InconsistentValue, InconsistentTiming, InconsistentOmission, InconsistentItemOmission, InconsistentServiceOmission, AsymmetricTransmissive, ConcurrencyError, RaceCondition, ReadWriteRace, WriteWriteRace, MutExError, Deadlock, Starvation}

  alias ErrorLibrary::TimingError = ErrorLibrary::ItemTimingError

  alias ErrorLibrary::BadValue = ErrorLibrary::ItemValueError

  alias ErrorLibrary::InconsistentValue = ErrorLibrary::AsymmetricValue

  alias ErrorLibrary::RateError = ErrorLibrary::SequenceTimingError

  alias ErrorLibrary::InconsistentItemOmission = ErrorLibrary::AsymmetricItemOmission

  alias ErrorLibrary::ValueError = ErrorLibrary::ItemValueError

  alias ErrorLibrary::LateData = ErrorLibrary::LowRate

  alias ErrorLibrary::AsymmetricTransmissive = ErrorLibrary::AsymmetricValue

  alias ErrorLibrary::SequenceError = ErrorLibrary::SequenceValueError

  alias ErrorLibrary::IncorrectValue = ErrorLibrary::ItemValueError

  alias ErrorLibrary::InconsistentOmission = ErrorLibrary::AsymmetricOmission

  alias ErrorLibrary::ServiceTimeShift = ErrorLibrary::ServiceTimingError

  alias ErrorLibrary::SubtleValueCorruption = ErrorLibrary::DetectableValueError

  alias ErrorLibrary::EarlyData = ErrorLibrary::HighRate

  alias ErrorLibrary::InconsistentServiceOmission = ErrorLibrary::AsymmetricServiceOmission

  alias ErrorLibrary::BenignValueError = ErrorLibrary::DetectableValueError

  alias ErrorLibrary::ValueCorruption = ErrorLibrary::ItemValueError

  alias ErrorLibrary::SubtleValueError = ErrorLibrary::UndetectableValueError

  alias ErrorLibrary::InconsistentTiming = ErrorLibrary::AsymmetricTiming

system  scenario_drop_scalpel_Instance
sub-components {
    clinician
      with ErrorLibrary
        ports
          out hand
          in foot
        propagations
          foot = {ItemCommission}
          hand = {ItemCommission}
        flows
          slippery_hand : * -> hand{ItemCommission}
          drop : foot{ItemCommission} -> *

    patient
      ports
        in skin

    scalpel
      with ErrorLibrary
        ports
          in handle
          out sharp_edge
        propagations
          handle = {ItemCommission}
          sharp_edge = {ItemCommission}
        flows
          slippery_handle : * -> sharp_edge{ItemCommission}
          drop : handle{ItemCommission} -> sharp_edge{ItemCommission}
}
connections
    hold : clinician.hand -> scalpel.handle

    intended_use : scalpel.sharp_edge -> patient.skin

    unintended_use : scalpel.sharp_edge -> clinician.foot